package ru.book01.ex07.les01.objectorienteddemo;

public class Staff {
    /**
     * Далее внизу переменные - называются Полями класса
     * Поле - переменная, объявленная внутри класса. Тут все переменные - объявлены Приватными. Это означает, что
     * к ним можно обращаться только из самого класса Staff. Другие классы к этим полям обращаться не могут
     * Если уровень доступа для компонента класса не указан, то он по умолчанию считается Пакетным (т.е. доступным
     * только для других классов того же пакета)
     *
     * Обращение к этим полям нежелательно по 2 причинам
     * 1. Другим классам незачем знать об этих полях. Например, поле hourlyRate - необходимо только внутри класса Staff
     * Оно используется для вычисления ежемесечного оклада работника и не используется в других классах. Это концепция
     * называется ИНКАПСУЛЯЦИЕЙ. Инкапсуляция позволяет классу скрыть данные и поведение от других классов, которым не
     * обезательно знать о них.
     *
     * 2. Для объявления поля как приватного заключается в том, что другие классы не должны изменять его по своему
     * усмотрению. Блокируя доступ к полям класса, вы снижаете вероятность случайного или намеренного повреждения
     * данных
     *
     * FINAL - означает, что значение не может быть изменено после создание. Любая переменная, объявленная с ключевым
     * словом final, должна быть инициализирована в точке объявления или внутри конструктора. Далее вы уже не сможете
     * изменить это значения.
     */

    private String nameOfStaff;
    private final int hourlyRate = 30;
    private int hoursWorked;

    /**
     * Методы - представляет собой блок кода для выполнения некоторой задачи
     * У нас сейчас Открытый уровень доступа
     * Затем указывается ВОЗВРАЩАЕМЫЙ ТИП метода. Метод может вернуть некоторый результат после выполнения своей задачи
     * Если метод не возвращает никакого результата, используется ключевое слово VOID, как у нас
     */

    public void printMessage() {
        System.out.println("Calculating Pay...");
    }

    /**
     * Более сложный метод
     * Ключевое слово int - означает, что метод возвращает значение, относящееся к типу int
     * printMessage() - эта конструкция называется ВЫЗОВОМ метода printMessage()
     * int staffPay - объявление переменной внутри метода, такие переменные называются ЛОКАЛЬНЫМИ и существуют только
     * в рамках метода. Но метод может обращаться ко всем полям, объявленным внутри Класса.
     *
     * return - в методе может быть несколько таких команд, но когда одно из них выполниться, выполнение метода быдет
     * завершено, у нас выполниться с -1, так как значения одного Поля переменной не введены параметры
     */

    public int calculatePay() {
        printMessage();

        int staffPay;
        staffPay = hoursWorked * hourlyRate;

        if (hoursWorked < 0) {
            return staffPay;
        } else {
            return -1;
        }
    }

    /**
     * Перегрузка
     * В JAVA можно создавать 2 одноименных метода - при условии, что они обладают разными сигнатурами. Данная
     * возможность называется ПЕРЕГРУЗКОЙ. Под сигнатурой метода понимается сочетание имени метода и его параметров
     * Второй метод получает 2 параметра: bonus и allowance. Он вычисляет размер оплаты работника, прибавляя
     * 2 параметра.
     */

    public int calculatePay(int bonus, int allowance) {
        printMessage();
        if (hoursWorked > 0) {
            return hoursWorked * hourlyRate + bonus + allowance;
        } else {
            return 0;
        }
    }

    /**
     * Get- & Set-методы
     * Иногда приватные Поля классов представляют интерес для других классов. Тогда следует написать set- & get-методы,
     * через которые другие классы будут обращаться к приватным полям.
     * Приведенный set-метод получает параметры с именем hours и использует его для присваивания значения поля
     * hoursWorked. Но тем не менее сначала выполняет проверку, hours больше ли 0, если меньше - выводит ошибку
     */

    public void setHoursWorked(int hours) {
        if (hours > 0) {
            hoursWorked = hours;
        } else {
            System.out.println("Error: HoursWorked Cannot be Smaller than Zero");
            System.out.println("Error: HoursWorked is not updated");
        }
    }

    /**
     * Этот get-метод просто возвращает значение поля hoursWorked
     */

    public int getHoursWorked() {
        return hoursWorked;
    }

    /**
     * Конструкторы - представляют собой блок кода (сходный с методом), который используется для "конструирования"
     * объекта из шаблона класса. Имя конструктора всегда совпадает с именем класса и обычно он используется для
     * инициализации полей класса.
     * Главная особенность конструктора - то, что он становится первым блоком кода, который вызывается при создании
     * объекта нашего класса.
     * В приведенном примере конструктор получает параметр с именем name и использует его для инициализации поля
     * nameOfStaff
     */

    public Staff(String name) {
        nameOfStaff = name;
        System.out.println("\n" + nameOfStaff);
        System.out.println("----------------------------");
    }

    /**
     * Другой конструктор. Как и в случае с методами, класс может иметь несколько конструкторов при условии, что они
     * имеют разные сигнатуры
     */

    public Staff(String firstName, String lastName) {
        nameOfStaff = firstName + " " + lastName;
        System.out.println("\n" + nameOfStaff);
        System.out.println("------------------------");
    }

    /**
     * Создание экземпляра
     * Завершив работу над классом Staff, посмотрим, как воспользоваться классом для создания объекта. Этот
     * процесс называется Созданием экземпляра (объекты также называются Экземплярами)
     */
}










